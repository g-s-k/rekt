use crate::ast::{Assign, Case, Declaration, Expr, Opcode, Statement};

grammar;

Tier<Op, NextTier>: Box<Expr> = {
    <Tier<Op,NextTier>> <Op> <NextTier> => Box::new(Expr::BinOp(<>)),
    NextTier
};

RTLTier<Op, NextTier>: Box<Expr> = {
    NextTier Op Tier<Op,NextTier> => Box::new(Expr::BinOp(<>)),
    NextTier
};

UnaryTier<Op, NextTier>: Box<Expr> = {
    Op NextTier => Box::new(Expr::UnOp(<>)),
    NextTier
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
        None => v,
    }
};

pub Script: Vec<Box<Statement>> = Stmt*;

Stmt: Box<Statement> = {
    Defun,
    IfForWhileStmt
};

VarDecl: Box<Statement> = {
    <kind: DeclKw> <lhs: IDENT> <rhs: ("=" <Exp>)?> ";" =>
        Box::new(Statement::Decl { kind, lhs: lhs.to_string(), rhs })
};

Defun: Box<Statement> = {
    <generator: FuncType> <name: IDENT> "(" <params: Comma<IDENT>> ")" "{" <body: Script> "}" =>
        Box::new(Statement::Decl {
            kind: Declaration::Var,
            lhs: name.to_string(),
            rhs: Some(Box::new(Expr::Defun {
                generator,
                name: Some(name.to_string()),
                params: params.into_iter().map(String::from).collect(),
                body,
            }))
        }),
};

// See https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers

IfForWhileStmt: Box<Statement> = {
    OpenStmt,
    ClosedStmt
};

OpenStmt: Box<Statement> = {
    OpenIf<SubStmt>,
    OpenIf<OpenStmt>,
    ClosedIf<ClosedStmt, OpenStmt>,
    ForLoop<OpenStmt>,
    WhileLoop<OpenStmt>,
    Label<OpenStmt>,
};

ClosedStmt: Box<Statement> = {
    SubStmt,
    ClosedIf<ClosedStmt, ClosedStmt>,
    ForLoop<ClosedStmt>,
    WhileLoop<ClosedStmt>,
    Label<ClosedStmt>,
};

OpenIf<T>: Box<Statement> = {
    "if" "(" <pred: T1> ")" <consq: T> => Box::new(Statement::If { pred, consq, alt: None }),
};

ClosedIf<T, U>: Box<Statement> = {
    "if" "(" <pred: T1> ")" <consq: T> "else" <a: U> => Box::new(Statement::If { pred, consq, alt: Some(a) }),
};

Label<T>: Box<Statement> = {
    <label: IDENT> ":" <s: T> => Box::new(Statement::Label(label.to_string(), s)),
};

ForLoop<T>: Box<Statement> = {
    "for" "(" <decl: DeclKw> <v: IDENT> "in" <obj: T1> ")" <body: T> =>
        Box::new(Statement::ForIn { decl, var: v.to_string(), obj, body }),
    "for" "(" <decl: DeclKw> <v: IDENT> "of" <obj: T1> ")" <body: T> =>
        Box::new(Statement::ForOf { decl, var: v.to_string(), obj, body }),
    "for" "(" <init: VarDecl> <term: T1> ";" <incr: T1> ")" <body: T> =>
        Box::new(Statement::For { init, term, incr, body }),
};

WhileLoop<T>: Box<Statement> = {
    "while" "(" <cond: T1> ")" <body: T> => Box::new(Statement::While {<>}),
};

TryCatch: Box<Statement> = {
    <try_body: Try> "catch" "(" <excep: IDENT> ")" "{" <catch_: Stmt*> "}" <finally_body: Finally?> =>
        Box::new(Statement::TryCatch { try_body, catch: Some((excep.to_string(), catch_)), finally_body }),
    <try_body: Try> <finally: Finally> =>
        Box::new(Statement::TryCatch { try_body, catch: None, finally_body: Some(finally) })
};

Try: Vec<Box<Statement>> = {
    "try" "{" <Stmt *> "}" => <>
};

Finally: Vec<Box<Statement>> = {
    "finally" "{" <Stmt *> "}" => <>
};

Switch: Box<Statement> = {
    "switch" "(" <value: T1> ")" "{" <body: SwitchCase*> "}" => Box::new(Statement::Switch {<>}),
};

SwitchCase: (Case, Vec<Box<Statement>>) = {
    "case" <e: T1> ":" <s: Script> => (Case::Case(e), s),
    "default" ":" <Script> => (Case::Default, <>)
};

SubStmt: Box<Statement> = {
    "return" <Exp?> ";" => Box::new(Statement::Return(<>)),
    "break" <IDENT?> ";" => Box::new(Statement::Break(<>.map(String::from))),
    "continue" <IDENT?> ";" => Box::new(Statement::Continue(<>.map(String::from))),
    "throw" <Exp> ";" => Box::new(Statement::Throw(<>)),
    VarDecl,
    TryCatch,
    Switch,
    "do" <body: IfForWhileStmt> "while" "(" <cond: T1> ")" => Box::new(Statement::DoWhile {<>}),
    "{" <Script> "}" => Box::new(Statement::Block(<>)),
    ";" => Box::new(Statement::Empty),
    <T1> ";" => Box::new(Statement::Plain(<>))
};

Exp: Box<Expr> = {
    <generator: FuncType> <name: IDENT?> "(" <params: Comma<IDENT>> ")" "{" <body: Script> "}" =>
        Box::new(Expr::Defun {
            generator,
            name: name.map(String::from),
            params: params.into_iter().map(String::from).collect(),
            body
        }),
    "[" "]" => Box::new(Expr::Array(vec![])),
    "[" <v: (<T2> ",")*> <e: T2> "]" => {
        let mut v = v;
        v.push(e);
        Box::new(Expr::Array(v))
    },
    T1
};

FuncType: bool = {
    "function" => false,
    "function*" => true,
};

// For tier reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table

T1: Box<Expr> = {
    <v:(<T2> ",")+> <e:T2> => {
        let mut v = v;
        v.push(e);
        Box::new(Expr::Seq(v))
    },
    T2
};

T2 = UnaryTier<YieldOp, T3>;

T3 = RTLTier<AssignOp, T4>;

T4: Box<Expr> = {
   <i0:T5> "?" <i1:T5> ":" <i2:T5> => Box::new(Expr::Tern(<>)),
    T5
};

T5 = Tier<OrOp, T6>;
T6 = Tier<AndOp, T7>;
T7 = Tier<BitOrOp, T8>;
T8 = Tier<BitXorOp, T9>;
T9 = Tier<BitAndOp, T10>;

T10 = Tier<EqOp, T11>;
T11 = Tier<CmpOp, T12>;

T12 = Tier<ShiftOp, T13>;
T13 = Tier<ExprOp, T14>;
T14 = Tier<FactorOp, T15>;

T15 = RTLTier<ExpOp, T16>;

T16 = UnaryTier<ItemOp, T17>;

T17: Box<Expr> = {
    <t:T18> <o:PostOp> => Box::new(Expr::UnOp(o, t)),
    T18
};

T18: Box<Expr> = {
    "new" <i:IDENT> => Box::new(Expr::New(i.to_string(), vec![])),
    T19
};

T19: Box<Expr> = {
    <T19> "." <T20> => Box::new(Expr::Access(<>)),
    <T19> "[" <T19> "]" => Box::new(Expr::Access(<>)),
    "new" <i:IDENT> "(" <v:Comma<T20>> ")" => Box::new(Expr::New(i.to_string(), v)),
    <T19> "(" <Comma<T2>> ")" => Box::new(Expr::Call(<>)),
    T20
};

T20: Box<Expr> = {
    "(" <Exp> ")" => <>,
    Term
};

DeclKw: Declaration = {
    "var" => Declaration::Var,
    "let" => Declaration::Let,
    "const" => Declaration::Const,
};

YieldOp: Opcode = {
    "yield" => Opcode::Yield(false),
    "yield*" => Opcode::Yield(true),
};

AssignOp: Opcode = {
    "=" => Opcode::Asn(Assign::Basic),
    "+=" => Opcode::Asn(Assign::Add),
    "-=" => Opcode::Asn(Assign::Sub),
    "**=" => Opcode::Asn(Assign::Exp),
    "*=" => Opcode::Asn(Assign::Mul),
    "/=" => Opcode::Asn(Assign::Div),
    "%=" => Opcode::Asn(Assign::Rem),
    "<<=" => Opcode::Asn(Assign::Shl),
    ">>=" => Opcode::Asn(Assign::Shr),
    ">>>=" => Opcode::Asn(Assign::Ushr),
    "&=" => Opcode::Asn(Assign::And),
    "^=" => Opcode::Asn(Assign::Xor),
    "|=" => Opcode::Asn(Assign::Or),
}

OrOp: Opcode = "||" => Opcode::Or;
AndOp: Opcode = "&&" => Opcode::And;
BitOrOp: Opcode = "|" => Opcode::BitOr;
BitXorOp: Opcode = "^" => Opcode::BitXor;
BitAndOp: Opcode = "&" => Opcode::BitAnd;

EqOp: Opcode = {
    "!==" => Opcode::Eq { strict: true, negated: true },
    "===" => Opcode::Eq { strict: true, negated: false },
    "!=" => Opcode::Eq { strict: false, negated: true },
    "==" => Opcode::Eq { strict: false, negated: false },
};

CmpOp: Opcode = {
    "<" => Opcode::Lt,
    ">" => Opcode::Gt,
    "<=" => Opcode::Lte,
    ">=" => Opcode::Gte,
    "in" => Opcode::In,
    "instanceof" => Opcode::InstanceOf,
};

ShiftOp: Opcode = {
    "<<" => Opcode::Shl,
    ">>" => Opcode::Shr,
    ">>>" => Opcode::Ushr,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "%" => Opcode::Rem,
};

ExpOp: Opcode = "**" => Opcode::Exp;

ItemOp: Opcode = {
    "!" => Opcode::Not,
    "~" => Opcode::BitNot,
    "+" => Opcode::Pos,
    "-" => Opcode::Neg,
    "++" => Opcode::Inc { post: false },
    "--" => Opcode::Dec { post: false },
    "typeof" => Opcode::TypeOf,
    "void" => Opcode::Void,
    "delete" => Opcode::Delete,
    "await" => Opcode::Await,
};

PostOp: Opcode = {
    "++" => Opcode::Inc { post: true },
    "--" => Opcode::Dec { post: true },
};

Term: Box<Expr> = {
    Ident,
    BOOL => Box::new(Expr::Bool(<>.parse().unwrap())),
    NUM => Box::new(Expr::Num(<>.parse().unwrap())),
    STRING => Box::new(Expr::Str(<>.to_string())),
};

Ident: Box<Expr> = IDENT => Box::new(Expr::Ident(<>.to_string()));

Comment: () = {
    r"//.*" => (),
    r"(?s)/\*.*\*/" => (),
};

match {
    "for",
    "of",
    "while",
    "do",
    "switch",
    "case",
    "default",
    "try",
    "catch",
    "finally",
    "throw",
    "return",
    "break",
    "continue",
    "function",
    "function*",
    "if",
    "else",
    "var",
    "let",
    "const",
    "new",
    "typeof",
    "void",
    "delete",
    "await",
    "in",
    "instanceof",
    "yield",
    r"(true|false)" => BOOL,
} else {
    r"([0-9]+[.])?[0-9]+" => NUM,
    r"[A-Za-z]+[A-Za-z0-9_*]*" => IDENT,
    r#"(?s)".*""# => STRING,
    _
}
